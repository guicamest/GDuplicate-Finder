plugins {
    alias(libs.plugins.kotlin.jvm)
    id 'java-library'
    id 'jvm-test-suite'
    id 'jacoco'
    alias(libs.plugins.kotlin.serialization)
    id "org.jlleitschuh.gradle.ktlint" version "12.1.0"
    id "me.champeau.jmh" version "0.7.2"
    id "app.cash.licensee" version "1.11.0"
}

kotlin {
    jvmToolchain(project.getProperties().getOrDefault("kotlin.jvmToolchain", 11) as Integer)
}

version = "$GDuplicateFinderVersion"

dependencies {
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.8.0"
    implementation "org.jetbrains.kotlinx:kotlinx-serialization-core:1.6.3"

    jmhImplementation "org.bouncycastle:bcprov-jdk18on:1.77"
    jmhImplementation 'commons-codec:commons-codec:1.16.1'

    ktlintRuleset project(":custom-ktlint-rules")
}

jacoco {
    toolVersion = "0.8.12"
}

ktlint {
    version = "1.2.1"
}

testing {
    suites {
        withType(JvmTestSuite).configureEach {
            useJUnitJupiter('5.10.0')
            dependencies {
                implementation 'org.assertj:assertj-core:3.25.3'

                implementation 'org.jetbrains.kotlin:kotlin-test'
                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:1.8.0"
                implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-debug:1.8.0'

                implementation "com.github.marschall:memoryfilesystem:2.8.0"
                implementation "com.google.jimfs:jimfs:1.3.0"

                implementation "org.jetbrains.kotlinx:kotlinx-serialization-json:1.6.3"
            }
        }
        integrationTest(JvmTestSuite) {
            dependencies {
                implementation project()
                implementation "software.amazon.nio.s3:aws-java-nio-spi-for-s3:2.0.1"

                implementation "ch.pontius.nio:smb-nio:0.13.0"

                // Provides transitive vulnerable dependency maven:com.jcraft:jsch:0.1.53
                implementation "com.pastdev:jsch-nio:1.0.14"
                implementation "com.jcraft:jsch:0.1.55"
            }
        }
    }
}

tasks.named('check') {
    dependsOn(testing.suites.integrationTest)
}

tasks.withType(Test) {
    jacoco.includes = ['com.sleepcamel.gduplicatefinder.*']
}

testlogger {
    slowThreshold 1000
}

jacocoTestReport {
    dependsOn test
}

java {
    withSourcesJar()
}

tasks.withType(Jar) {
    manifest {
         attributes(
             'Implementation-Title': project.name,
             'Implementation-Version': project.version,
         )
    }
}

jmh {
    def buildDir = project.layout.buildDirectory.get()
    def jfrReports = buildDir.dir('reports').file('jfr')
    profilers = ["jfr:dir=${jfrReports}"]
}

licensee {
    allow('Apache-2.0')
}
